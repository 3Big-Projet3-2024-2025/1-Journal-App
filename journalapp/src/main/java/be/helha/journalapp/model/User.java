package be.helha.journalapp.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import io.swagger.annotations.ApiModelProperty;
import jakarta.persistence.*;
import lombok.Data;
import java.util.List;

/**
 * Represents a user within the application.
 * <p>
 * This entity is mapped to a database table and stores information about users, including
 * their personal details, authorization status, role, and relationships with articles and newsletters.
 * It also has an ID for Keycloak.
 */
@Entity
@Data
@Table(name = "Users")
public class User {

    /**
     * The unique identifier for this user.
     * <p>
     * This field is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;

    /**
     * The last name of the user.
     */
    private String lastName;

    /**
     * The first name of the user.
     */
    private String firstName;

    /**
     * The email address of the user.
     */
    private String email;

    /**
     * Indicates whether the user is authorized to access the application.
     */
    private boolean isAuthorized;

    /**
     * Indicates whether the user requested a role change.
     */
    private boolean isRoleChange;

    /**
     * The unique identifier for this user in Keycloak.
     */
    private String keycloakId;


    /**
     * The role assigned to this user.
     * <p>
     * This establishes a many-to-one relationship with the {@link Role} entity.
     * The foreign key in the Users table references the primary key of the Role table.
     */
    @ManyToOne
    @JoinColumn(name = "role_id", nullable = false)
    private Role role;


    /**
     * The articles written by this user.
     * <p>
     * This establishes a one-to-many relationship with the {@link Article} entity.
     * The relationship is managed by the `author` field in the Article entity.
     * It is ignored in JSON serialization.
     */
    @JsonIgnore
    @ApiModelProperty(hidden = true)
    @OneToMany(mappedBy = "author", cascade = CascadeType.ALL)
    private List<Article> articles;

    /**
     * The newsletters created by this user.
     * <p>
     * This establishes a one-to-many relationship with the {@link Newsletter} entity.
     * The relationship is managed by the `creator` field in the Newsletter entity.
     * It is ignored in JSON serialization.
     */
    @JsonIgnore
    @ApiModelProperty(hidden = true)
    @OneToMany(mappedBy = "creator", cascade = CascadeType.ALL)
    private List<Newsletter> newsletters;

    /**
     * The list of articles read by the user.
     * <p>
     * This establishes a one-to-many relationship with the {@link UserArticleRead} entity.
     * The relationship is managed by the `user` field in the UserArticleRead entity.
     * It is ignored in JSON serialization.
     */
    @JsonIgnore
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
    private List<UserArticleRead> articleReads;
}